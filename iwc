#!/bin/sh
#
# Simple iwd client.

auth() {
    [ -f "$ssid.psk" ] && die "Network already configured"

    printf 'Enter password: '

    # Ensure that we leave the terminal in a usable
    # state on exit or Ctrl+C.
    trap 'stty echo' INT EXIT

    # Disable terminal printing while the user inputs their
    # password. POSIX 'read' has no '-s' flag which would
    # effectively do the same thing.
    stty -echo; read -r pass; stty echo

    printf '\n'
    printf '[Security]\nPassphrase=%s\n' \
        "${pass:?Password is blank}" > "$ssid.psk"
}

conn() {
    case $conf in
        ./disconnect/*)
            mv -f "$conf" "${conf##*/}"
        ;;

        *)  mv -f "$conf" "$conf.bak"
            sleep 1
            mv -f "$conf.bak" "$conf"
    esac
}

dele() {
    rm -f "$conf"
}

disc() {
    mv -f "$conf" disconnect/
}

edit() {
    "${EDITOR:-vi}" "$conf"
}

list() {
    log "Currently configured networks" >&2

    find_network
}

scan() {
    [ -s data/scan ] || die "No networks found"

    # Parse the file to figure out which SSID is the longest.
    # SSIDs have a max length of 32 characters though this
    # can be a little too long as a field width.
    #
    # This sets the field width of the SSID to the length
    # of the longest SSID.
    while IFS='	' read -r ssid _; do
        len=$((${#ssid} > len ? ${#ssid} : len))
    done < data/scan

    # Parse the file and print it as an aligned table. This
    # is rather easy as the max widths of each field are known.
    while IFS='	' read -r ssid sec adr frq rnk stn; do
        printf '%-*s  %-8s  %-17s  %4s  %4s  %8s\n' \
            "$len" "$ssid" "$sec" "$adr" "$frq" "$rnk" "$stn"
    done < data/scan
}

ssid() {
    read -r current 2>/dev/null < data/current ||
        die 'Not currently connected'
}

ssid_encode() {
    # The SSID appears verbatim in the name if it contains
    # only alphanumeric characters, spaces, underscores or
    # minus signs. Otherwise it is encoded as an equal sign
    # followed by the lower-case hex encoding of the name.
    case $1 in
        *[!A-Za-z0-9-_' ']*)
            ssid="=$(printf %s "$1" | od -vA n -t x1 | tr -d '\n ')"
        ;;

        *)  ssid=$1
    esac
}

find_network() {
    find . -type f \
        -name "${1:-*}.psk"  -o \
        -name "${1:-*}.open" -o \
        -name "${1:-*}.8021x"
}

log() {
    printf '=> %s\n' "$@"
}

die() {
    printf 'error: %s\n' "$@" >&2
    exit 1
}

help() { printf '%s\n' "\
iwc 0.2.1 - simple eiwd client.

=> [au]th [ssid]
    - Add a new network by creating the
    - network configuration file.
    - If the network is in range, [iwd]
    - will attempt to connect to it.

=> [co]nnect [ssid]
    - Connect to an SSID.
    - Reconnect to SSID.

=> [de]lete [ssid]
    - Delete a network's conf file.

=> [di]sconnect
    - Disconnect from the current
    - network and disable autoconnect
    - for this session.

=> [ed]it [ssid]
    - Open a network's config file.
    - Uses '${EDITOR:-vi}'.

=> [li]st
    - List all configured networks.

=> [sc]an
    - Show scan results.
    - These results are updated by the
    - [iwd] daemon periodically.

=> [ss]id
    - Show connected network SSID.
"; }

main() {
    [ -w "${IWD_DIR:=/var/lib/iwd}" ] ||
        die "iwc needs to be run as root" \
            "or given rwx in $IWD_DIR"

    cd "$IWD_DIR" ||
        die "cannot access $IWD_DIR"

    case $1 in
        au*|co*|de*|ed*)
            ssid_encode "${2:?Missing [ssid] argument}"
        ;;

        di*)
            ssid
            ssid_encode "$current"
        ;;
    esac

    case $1 in
        co*|de*|di*|ed*)

        conf=$(find_network "$ssid" | grep -m 1 .)

        [ -f "$conf" ] || die "Network '$2' not found"
        [ -w "$conf" ] || die "No write permission to '$2'"

        mkdir -p disconnect
    esac

    case $1 in
        au*) auth; log "Saved configuration to $PWD/$ssid.psk" ;;
        co*) conn; log "Requested connection to '$2'" ;;
        de*) dele; log "Deleted network '$2'" ;;
        di*) disc; log "Disconnected from '$current'" ;;
        ed*) edit ;;
        li*) list ;;
        ss*) ssid; log "Connected to '$current'" ;;
        sc*) scan ;;
        *)   help ;;
    esac
}

# Ensure that debug mode is never enabled to
# prevent the password from leaking.
set +x

# Ensure that globbing is globally disabled
# to avoid insecurities with word-splitting.
set -f

[ "$1" ] || help && main "$@"
