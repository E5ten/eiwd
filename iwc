#!/bin/sh
#
# Simple iwd client.

# Disable this warning as 'sread()' dynamically
# declares the 'pass' variable.
# shellcheck disable=2154
auth() {
    [ -f "$ssid.psk" ] &&
        die "Network already configured"

    sread pass 'Enter password'

    [ "$pass" ] ||
        die "Password is blank"

    printf '[Security]\nPassphrase=%s\n' "$pass" > "$ssid.psk"

    log "Saved configuration to $PWD/$ssid.psk" \
        "Requested auth with iwd (if SSID exists)"
}

conn() {
    case $conf in
        ./disconnect/*)
            mv -f "$conf" "${conf##*/}"
        ;;

        *)
            mv -f "$conf" "$conf.bak"
            sleep 1
            mv -f "$conf.bak" "$conf"
        ;;
    esac

    log "Requested connection to '$1'"
}

dele() {
    rm -f "$conf"

    log "Deleted network '$1'"
}

disc() {
    mv -f "$conf" disconnect/

    : > data/current

    log "Disconnected from '$ssid'"
}

list() {
    log "Currently configured networks" >&2

    find_network
}

scan() {
    [ -s data/scan ] ||
        die "No networks found"

    if command -v column >/dev/null 2>&1; then
        column -ts "$(printf '\t')" < data/scan
    else
        cat data/scan
    fi
}

ssid() {
    if [ -s data/current ]; then
        read -r ssid < data/current
        log "Connected to '$ssid'"
    else
        die 'Not currently connected'
    fi
}

ssid_encode() {
    # The SSID appears verbatim in the name if it contains
    # only alphanumeric characters, spaces, underscores or
    # minus signs. Otherwise it is encoded as an equal sign
    # followed by the lower-case hex encoding of the name.
    case $1 in
        *[!A-Za-z0-9-_' ']*)
            printf %s "$1" | od -vA n -t x1 | tr -d '\n '
        ;;

        *)
            printf %s "$1"
        ;;
    esac
}

find_network() {
    set +f

    find . -type f \
        -name "${1:-*}.psk"  -o \
        -name "${1:-*}.open" -o \
        -name "${1:-*}.8021x" |
        grep -m1 .

    set -f
}

sread() {
    printf '%s: ' "$2"

    # Disable terminal printing while the user inputs their
    # password. POSIX 'read' has no '-s' flag which would
    # effectively do the same thing.
    stty -echo
    read -r "$1"
    stty echo

    printf '\n'
}

log() {
    printf '=> %s\n' "$@"
}

die() {
    printf 'error: %s\n' "$@" >&2
    exit 1
}

help() { printf '%s\n' "\
iwc 0.2.0 - simple eiwd client.

=> [au]th [ssid]
    - Add a new network by creating the
    - network configuration file.
    - If the network is in range, [iwd]
    - will attempt to connect to it.

=> [co]nnect [ssid]
    - Connect to an SSID.
    - Reconnect to SSID.

=> [de]lete [ssid]
    - Delete a network's conf file.

=> [di]sconnect
    - Disconnect from the current
    - network and disable autoconnect
    - for this session.

=> [li]st
    - List all configured networks.

=> [sc]an
    - Show scan results.
    - These results are updated by the
    - [iwd] daemon periodically.

=> [ss]id
    - Show connected network SSID.
"
}

main() {
    : "${IWD_DIR:=/var/lib/iwd}"

    [ -w "$IWD_DIR" ] ||
        die 'iwc needs to be run as root' \
            'or given rwx in /var/lib/iwd'

    cd "$IWD_DIR" ||
        die "cannot access $IWD_DIR"

    case $1 in
        au*|de*|co*)
            [ "$2" ] ||
                die "Missing [ssid] argument"

            ssid=$(ssid_encode "$2")
        ;;

        di*) ssid >/dev/null ;;
    esac

    case $1 in
        de*|di*|co*)

        conf=$(find_network "$ssid")

        [ -f "$conf" ] ||
            die "Network '$2' not found"

        [ -w "$conf" ] ||
            die "No write permission to '$2'"

        mkdir -p disconnect
    esac

    case $1 in
        au*) auth "$2" ;;
        co*) conn "$2" ;;
        de*) dele "$2" ;;
        di*) disc ;;
        li*) list ;;
        ss*) ssid ;;
        sc*) scan ;;
        *)   help ;;
    esac
}

# Ensure that debug mode is never enabled to
# prevent the password from leaking.
set +x

# Ensure that globbing is globally disabled
# to avoid insecurities with word-splitting.
set -f

# Ensure that we leave the terminal in a usable
# state on exit or Ctrl+C.
trap 'stty echo' INT EXIT

main "$@"
